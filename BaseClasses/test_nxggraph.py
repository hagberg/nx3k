# Some Testing
# ============
import concrete_classes as cc

if __name__ == "__main__":
    G = cc.Graph()
    G.nodes.add(3)
    G.nodes.update((4, (5,{"color": "red"})))
    G.edges.add(2,1)
    G.edges.update([(4,6), ((7,4),{"weight":2})])
    #print("Nodes:", list(G.nodes))
    assert(list(sorted(G.nodes)) == [1,2,3,4,5,6,7])
    #print("Nodes with data:", list(G.nodes.data()))
    assert(list(sorted(G.nodes.data())) == [(1, {}), (2, {}), (3, {}), (4, {}), (5, {"color": "red"}), (6, {}), (7, {})])
    #print("Nodes with weight:", list(G.nodes.data("color")))
    assert(list(sorted(G.nodes.data("color"))) == [(5, 'red')])
    #print("Edges:", list(G.edges))
    assert(list(G.edges) == [(2, 1), (4, 6), (7, 4)])
    #print("Edges with data:", list(G.edges.data()))
    assert(list(G.edges.data()) == [((2, 1), {}), ((4, 6), {}), ((7, 4), {"weight": 2})])
    #print("Edges with data 'wt':", list(G.edges.data("wt")))
    assert(list(G.edges.data("wt")) == [])
    #print("Edges with data 'weight':", list(G.edges.data("weight")))
    assert(list(G.edges.data("weight")) == [((7, 4), 2)])
    #print("Neighbors of 2:", list(G.adjacency[2]))
    assert(list(G.adjacency[2]) == [1])
    #print("Neighbors of 3:", list(G.adjacency[3]))
    assert(list(G.adjacency[3]) == [])
    #print("Neighbors of 1:", list(G.adjacency[1]))
    assert(list(G.adjacency[1]) == [2])
    #print("Neighbors of 4:", list(G.adjacency[4]))
    assert(list(G.adjacency[4]) == [6, 7])
    #print("Neighbors with data of 4:", list(G.adjacency[4].data()))
    print("Directed Graph")
    DG = cc.Graph(directed=True)
    DG.nodes.add(3)
    DG.nodes.update((4, (5,{"color": "red"})))
    DG.edges.add(2,1)
    DG.edges.update([(4,6), ((7,4),{"weight":2})])
    #print("Nodes:", list(DG.nodes))
    assert(list(sorted(DG.nodes)) == [1,2,3,4,5,6,7])
    #print("Nodes with data:", list(DG.nodes.data()))
    assert(list(sorted(DG.nodes.data())) == [(1, {}), (2, {}), (3, {}), (4, {}), (5, {"color": "red"}), (6, {}), (7, {})])
    #print("Nodes with weight:", list(DG.nodes.data("color")))
    assert(list(sorted(DG.nodes.data("color"))) == [(5, 'red')])
    #print("Edges:", list(DG.edges))
    assert(list(DG.edges) == [(2, 1), (4, 6), (7, 4)])
    #print("Neighbors of 2:", list(DG.adjacency[2]))
    assert(list(DG.adjacency[2]) == [1])
    #print("Neighbors of 3:", list(DG.adjacency[3]))
    assert(list(DG.adjacency[3]) == [])
    #print("Neighbors of 1:", list(DG.adjacency[1]))
    assert(list(DG.adjacency[1]) == [2])
    #print("Neighbors of 4:", list(DG.adjacency[4]))
    assert(list(DG.adjacency[4]) == [6, 7])
    #print("Neighbors with data of 4:", list(DG.adjacency[4].data()))
    #print("Neighbors with data of 4:", list(DG.adjacency[4].data()))
    assert(list(DG.adjacency[4].data()) == [(6, {}), (7, {'weight': 2})])
    #print("Predecessors of 2:", list(DG.pred[2]))
    assert(list(DG.pred[2]) == [])
    #print("Predecessors of 3:", list(DG.pred[3]))
    assert(list(DG.pred[3]) == [])
    #print("Predecessors of 1:", list(DG.pred[1]))
    assert(list(DG.pred[1]) == [2])
    #print("Succcessors of 2:", list(DG.succ[2]))
    assert(list(DG.succ[2]) == [1])
    #print("Succcessors of 3:", list(DG.succ[3]))
    assert(list(DG.succ[3]) == [])
    #print("Succcessors of 1:", list(DG.succ[1]))
    assert(list(DG.succ[1]) == [])
    print("END OF INITIAL TESTS")

if __name__ == '__main__':
    graph = cc.Graph()
    graph.edges.add(1,2,foo='f',bar='b' )
    graph.edges.add(2,3,foo='f',bar='b' )
    graph.edges.add(3,4,foo='f',bar='b' )
    graph.edges.add(4,5)
    #print(graph.nodes)
    assert(sorted(graph.nodes) == [1,2,3,4,5])
    #print(graph.nodes.data())
    assert(sorted(graph.nodes.data()) == [(1, {}), (2, {}), (3, {}), (4, {}), (5, {})] )
    #print(graph.nodes.data("color"))
    assert(sorted(graph.nodes.data("color")) == [])
    #print(len(graph.nodes))
    assert(len(graph.nodes) == 5)
    #print(1 in graph.nodes)
    assert(1 in graph.nodes)
    graph2 = cc.Graph()
    graph2.edges.add(0,1)
    graph2.edges.add(1,2,foo='f',bar='b' )
    graph2.edges.add(2,3)
    graph2.edges.add(3,4)
    #print(graph.nodes & graph2.nodes)
    assert(graph.nodes & graph2.nodes == set(range(1,5)))

    #print(graph.edges)
    assert(sorted(graph.edges) == [(1, 2), (2, 3), (3, 4), (4, 5)])
    #print(len(graph.edges))
    assert(len(graph.edges) == 4)
    #print(graph.edges.data())
    assert(sorted(graph.edges.data()) == [
            ((1, 2), {'foo': 'f', 'bar': 'b'}),
            ((2, 3), {'foo': 'f', 'bar': 'b'}),
            ((3, 4), {'foo': 'f', 'bar': 'b'}), ((4, 5), {})])
    #print(graph.edges.data("weight"))
    assert(sorted(graph.edges.data("weight")) == [])
    #print([(e,d.get('foo','default')) for (e,d) in graph.edges.data()])
    assert([(e,d.get('foo','default')) for (e,d) in graph.edges.data()] ==\
            [((1,2),'f'), ((2,3),'f'), ((3,4),'f'), ((4,5),'default')])
    #print(dict(graph.edges.data()))
    assert(dict(graph.edges.data()) == {(1,2): {'foo':'f','bar':'b'},
                                        (2,3): {'foo':'f','bar':'b'},
                                        (3,4): {'foo':'f','bar':'b'},
                                        (4,5): {}})
    #print((2,3) in graph.edges)
    assert((2,3) in graph.edges)
#    print(graph.edges & graph2.edges)
    #print(graph.edges[(1,2)])
    assert(graph.edges[(1,2)] == {'foo':'f', 'bar': 'b'})

    print("-- subgraph --")

    graph.nodes[1]['a']='b'
    s = graph.subgraph([1,2])
    #print(s)
    #print(s.nodes)
    assert(list(s.nodes) == [1,2])
    #print(list(s.nodes.data()))
    assert(list(s.nodes.data()) == [(1,{'a': 'b'}), (2,{})])
    #print(s.edges)
    assert(list(s.edges) == [(1, 2)])
    #print(s.edges.data("weight"))
    assert(list(s.edges.data("weight")) == [])
    #print(s.adjacency)
    assert(True)

    #print(graph.subgraph([1,2]).edges.data())
    assert(list(graph.subgraph([1,2]).edges.data()) == [((1, 2), {'foo':'f', 'bar': 'b'})])
    #print([(e,d.get('foo','default')) for (e,d) in graph.subgraph([1,2]).edges.data()])
    assert([(e,d.get('foo','default')) for (e,d) in graph.subgraph([1,2]).edges.data()] == [((1,2), 'f')])
